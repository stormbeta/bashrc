#!/usr/bin/env bash

set -eo pipefail

if [[ $# -lt 1 ]]; then
  read -rp 'MFA Token: ' MFA_TOKEN
else
  MFA_TOKEN="$1"
fi

if ! command -v aws >/dev/null; then
  echo "aws cli not found!" 1>&2
  exit 3
fi

# Profile that contains static creds
STATIC_PROFILE='ping-iam'
# Profile to set dynamic creds on
MFA_PROFILE='ping-mfa'
# Profile to validate creds with
VALIDATE_PROFILE="$AWS_PROFILE"

USERNAME="${USER:-$2}"
USERNAME="${USERNAME//CORP\\/}"
echo "Authenticating as ${USERNAME}"
HOURS=36
DURATION=$((( HOURS * 3600 )))

function generate-creds {
  local mfa_token="$1"
  local mfa_arn_path="${HOME}/.aws/mfa_arn.${USERNAME}"
  if [[ ! -f "$mfa_arn_path" ]]; then
    aws --profile "$STATIC_PROFILE" iam list-virtual-mfa-devices --query "VirtualMFADevices[?User.UserName=='$USERNAME'].SerialNumber" --output text > "$mfa_arn_path"
  fi
  local mfa_arn="$(<"$mfa_arn_path")"
  echo "MFA ARN: ${mfa_arn}"
  local sts_response
  sts_response="$(aws --profile "$STATIC_PROFILE" sts get-session-token \
      --duration "$DURATION"  \
      --serial-number "$mfa_arn" \
      --token-code "$mfa_token" \
      --output json \
      | jq -r '[.Credentials | .AccessKeyId, .SecretAccessKey, .SessionToken] | join(" ")')"
  if [[ $? -ne 0 ]]; then
    echo "Error on STS request:" 1>&2
    echo "$sts_response" 1>&2
    exit 3
  fi
  read -r access_key_id secret_access_key session_token <<< "$sts_response"

  # NOTE: if using any tools based on AWS's golang SDK, you'll need to set
  #       AWS_SDK_LOAD_CONFIG or they won't work properly with profiles

  if [[ -n "$access_key_id" ]]; then
    aws --profile "$MFA_PROFILE" configure set aws_access_key_id "$access_key_id"
    aws --profile "$MFA_PROFILE" configure set aws_secret_access_key "$secret_access_key"
    aws --profile "$MFA_PROFILE" configure set aws_session_token "$session_token"
    return 0
  else
    return 1
  fi
}

function validate-creds {
  aws sts get-caller-identity --profile "$VALIDATE_PROFILE" 1>/dev/null
}

if generate-creds "$MFA_TOKEN"; then
  if validate-creds; then
    echo "Sucessfully set temporary creds, they will be valid for ${HOURS} hours." 1>&2
  else
    echo "Credentials generated but couldn't be used, see error above" 1>&2
    exit 2
  fi
elif validate-creds; then
  echo "Couldn't generate new credentials, but existing credentials are still valid!" 1>&2
fi
